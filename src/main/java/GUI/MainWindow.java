/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import Application.InvalidCredentialsException;
import Application.ServiceLocator;
import java.io.IOException;
import Security.IIdentity;
import Model.ImageModel;
import Model.titleModel;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import java.awt.HeadlessException;
import java.sql.SQLException;
import java.util.concurrent.ExecutionException;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTabbedPane;
import java.awt.*;    
import javax.swing.JFrame;
import java.awt.Graphics;
import java.util.Arrays;
import java.io.File;
import javax.swing.JLabel;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import Application.Product;

import javax.swing.JPanel;
import oracle.jdbc.pool.OracleDataSource;
import java.awt.geom.Area;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Collections;
import java.util.LinkedList;
import oracle.spatial.geometry.JGeometry;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import Model.SpatialModel;
/**
 *
 * @author doria
 */
public class MainWindow extends javax.swing.JFrame  {

    public MainWindow( ) {
        initComponents();
    }

    //==============================Login GUI
    public class Login extends javax.swing.JPanel {
        public Login() {
        initComponents();
    }

public String getIdentityName() {
        IIdentity identity = ServiceLocator.getAuthenticator().getIdentity();
        if (identity.isLoggendIn()) {
            return identity.getUsername();
        } 
            else {
                return "failed to login";
            }
        }
     //结构
    abstract class BackgroundWorker extends SwingWorker<String, Integer> {
           //定义什么是已完成
             @Override
             protected void done() {
            try {
                login_button.setEnabled(true);
                logout_button.setEnabled(true);
               
                JOptionPane.showMessageDialog(getParent(), get());
            } catch (InterruptedException | ExecutionException | HeadlessException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
 
    }
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        Login = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        password_input = new javax.swing.JPasswordField();
        Password = new javax.swing.JLabel();
        UserName = new javax.swing.JLabel();
        username_input = new javax.swing.JTextField();
        login_button = new javax.swing.JButton();
        logout_button = new javax.swing.JButton();
        help = new javax.swing.JButton();
        Image = new javax.swing.JPanel();
        Delete = new javax.swing.JButton();
        title_combobox = new javax.swing.JComboBox<>();
        refreshLayoutList_button = new javax.swing.JButton();
        similar_button = new javax.swing.JButton();
        InsertImage = new javax.swing.JButton();
        ListAllImage = new javax.swing.JButton();
        Pic_Container_parrent = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        picture_container = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Spatial = new javax.swing.JPanel();
        Loading = new javax.swing.JButton();
        getLengthOfBuilding = new javax.swing.JButton();
        getDistancesFromBuilding = new javax.swing.JButton();
        getNNearestNeighboursFromBuilding = new javax.swing.JButton();
        doUnionOperation = new javax.swing.JButton();
        getAreaOfBuilding = new javax.swing.JButton();
        deleteBuildingWithName = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.FlowLayout());

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Elephant", 2, 24)); // NOI18N
        jLabel1.setText("Simple Client");

        Password.setText("PassWord");

        UserName.setText("UserName");

        login_button.setText("Login");
        login_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                login_buttonActionPerformed(evt);
            }
        });

        logout_button.setText("Logout");
        logout_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_buttonActionPerformed(evt);
            }
        });

        help.setText("help");
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LoginLayout = new javax.swing.GroupLayout(Login);
        Login.setLayout(LoginLayout);
        LoginLayout.setHorizontalGroup(
            LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginLayout.createSequentialGroup()
                .addGap(81, 102, Short.MAX_VALUE)
                .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginLayout.createSequentialGroup()
                        .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(LoginLayout.createSequentialGroup()
                                .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(UserName)
                                    .addComponent(Password))
                                .addGap(73, 73, 73)
                                .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(password_input, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(username_input, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel1))
                        .addGap(67, 67, 67)
                        .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(login_button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(logout_button, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(312, 312, 312))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginLayout.createSequentialGroup()
                        .addComponent(help)
                        .addGap(131, 131, 131))))
        );
        LoginLayout.setVerticalGroup(
            LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(help)
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addGap(84, 84, 84)
                .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UserName)
                    .addComponent(username_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(login_button))
                .addGap(18, 18, 18)
                .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Password)
                    .addGroup(LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(password_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(logout_button)))
                .addContainerGap(321, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Login", Login);

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        title_combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        refreshLayoutList_button.setText("refreshLayoutList");
        refreshLayoutList_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshLayoutList_buttonActionPerformed(evt);
            }
        });

        similar_button.setText("similar");
        similar_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                similar_buttonActionPerformed(evt);
            }
        });

        InsertImage.setText("Insert");
        InsertImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertImageActionPerformed(evt);
            }
        });

        ListAllImage.setText("ShowAllImage");
        ListAllImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListAllImageActionPerformed(evt);
            }
        });

        jLabel2.setText("1");
        picture_container.add(jLabel2);

        jLabel3.setText("2");
        picture_container.add(jLabel3);

        jScrollPane1.setViewportView(picture_container);

        javax.swing.GroupLayout Pic_Container_parrentLayout = new javax.swing.GroupLayout(Pic_Container_parrent);
        Pic_Container_parrent.setLayout(Pic_Container_parrentLayout);
        Pic_Container_parrentLayout.setHorizontalGroup(
            Pic_Container_parrentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pic_Container_parrentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(155, Short.MAX_VALUE))
        );
        Pic_Container_parrentLayout.setVerticalGroup(
            Pic_Container_parrentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Pic_Container_parrentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ImageLayout = new javax.swing.GroupLayout(Image);
        Image.setLayout(ImageLayout);
        ImageLayout.setHorizontalGroup(
            ImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ImageLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Pic_Container_parrent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ImageLayout.createSequentialGroup()
                        .addComponent(refreshLayoutList_button)
                        .addGap(18, 18, 18)
                        .addComponent(similar_button)
                        .addGap(18, 18, 18)
                        .addComponent(Delete)
                        .addGap(18, 18, 18)
                        .addComponent(InsertImage)
                        .addGap(18, 18, 18)
                        .addComponent(ListAllImage)
                        .addGap(18, 18, 18)
                        .addComponent(title_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        ImageLayout.setVerticalGroup(
            ImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ImageLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ImageLayout.createSequentialGroup()
                        .addComponent(refreshLayoutList_button)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ImageLayout.createSequentialGroup()
                        .addGroup(ImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(similar_button)
                            .addComponent(Delete)
                            .addComponent(InsertImage)
                            .addComponent(ListAllImage)
                            .addComponent(title_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)))
                .addComponent(Pic_Container_parrent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Image", Image);

        Loading.setText("Loading");
        Loading.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadingActionPerformed(evt);
            }
        });

        getLengthOfBuilding.setText("getLengthOfBuilding");
        getLengthOfBuilding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getLengthOfBuildingActionPerformed(evt);
            }
        });

        getDistancesFromBuilding.setText("getDistancesFromBuilding");
        getDistancesFromBuilding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDistancesFromBuildingActionPerformed(evt);
            }
        });

        getNNearestNeighboursFromBuilding.setText("getNNearestNeighboursFromBuilding");
        getNNearestNeighboursFromBuilding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getNNearestNeighboursFromBuildingActionPerformed(evt);
            }
        });

        doUnionOperation.setText("doUnionOperation");
        doUnionOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doUnionOperationActionPerformed(evt);
            }
        });

        getAreaOfBuilding.setText("getAreaOfBuilding");
        getAreaOfBuilding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAreaOfBuildingActionPerformed(evt);
            }
        });

        deleteBuildingWithName.setText("deleteBuildingWithName");
        deleteBuildingWithName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBuildingWithNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SpatialLayout = new javax.swing.GroupLayout(Spatial);
        Spatial.setLayout(SpatialLayout);
        SpatialLayout.setHorizontalGroup(
            SpatialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SpatialLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(SpatialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SpatialLayout.createSequentialGroup()
                        .addGroup(SpatialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(SpatialLayout.createSequentialGroup()
                                .addComponent(Loading)
                                .addGap(18, 18, 18)
                                .addComponent(getLengthOfBuilding))
                            .addComponent(getAreaOfBuilding)
                            .addComponent(doUnionOperation))
                        .addGap(117, 117, 117)
                        .addGroup(SpatialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deleteBuildingWithName)
                            .addComponent(getDistancesFromBuilding)))
                    .addGroup(SpatialLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(getNNearestNeighboursFromBuilding)))
                .addContainerGap(310, Short.MAX_VALUE))
        );
        SpatialLayout.setVerticalGroup(
            SpatialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SpatialLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(SpatialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Loading)
                    .addComponent(getLengthOfBuilding)
                    .addComponent(getDistancesFromBuilding))
                .addGap(46, 46, 46)
                .addComponent(doUnionOperation)
                .addGap(33, 33, 33)
                .addGroup(SpatialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getAreaOfBuilding)
                    .addComponent(deleteBuildingWithName))
                .addGap(82, 82, 82)
                .addComponent(getNNearestNeighboursFromBuilding)
                .addContainerGap(266, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Spatial", Spatial);

        getContentPane().add(jTabbedPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        JTabbedPane source= (JTabbedPane) evt.getSource();
        int index = source.getSelectedIndex();
        System.out.println("Tab changed to: " + source.getTitleAt(index));
        if (source.getTitleAt(index).equals("Image")) {
        }
        {  // else if (source.getTitleAt(index).equals("SpatialModel")) {
            try {
            } catch (Exception ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void ListAllImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListAllImageActionPerformed
        getNextIcon();
    }//GEN-LAST:event_ListAllImageActionPerformed

    private void InsertImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertImageActionPerformed
        try {
            insert();
        } catch (SQLException | IOException | Product.NotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_InsertImageActionPerformed

    private void similar_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_similar_buttonActionPerformed

        //statubar.setVisible(false);
        JFrame frame = new JFrame("Most similar results");
        searchResults sr = new searchResults(picture.getIndex());

        System.out.print(sr);
        frame.add(sr);
        frame.pack();
        frame.setVisible(true);

    }//GEN-LAST:event_similar_buttonActionPerformed

    private void refreshLayoutList_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshLayoutList_buttonActionPerformed

        updateCombo();
        picture.setVisible(false);
        picture.setIcon(null);
    }//GEN-LAST:event_refreshLayoutList_buttonActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        ImageModel modelimg=new ImageModel();
        try{
            // for (int k=1;k<= 6;k++){
                boolean del;
                del=modelimg.delete(1);
                //}
        }
        catch (SQLException e) {
            System.out.println("delete error");
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed
if (Desktop.isDesktopSupported())
        try {
          
            String path = "///C:/Users/doria/Desktop/oracle-project/help/help.pdf";
            //相对路径无法打开
            //Cuz i didnt set classpath on jar i cant open by classpath 
            java.awt.Desktop.getDesktop().open(new File(path));
          
        }
        catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(getParent(), "fail to open the file.");
        }
    }//GEN-LAST:event_helpActionPerformed

    private void logout_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_buttonActionPerformed
        //退出登录按钮
        ServiceLocator.getAuthenticator().logout();
        //mainWindow.checkPanelAvailability();
    }//GEN-LAST:event_logout_buttonActionPerformed

    private void login_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_login_buttonActionPerformed
        //=========按登录按钮后 事件处理
        String username = username_input.getText();
        String password = new String(password_input.getPassword());

        try {
            ServiceLocator.getAuthenticator().login(username, password);
            logout_button.setEnabled(true);
        } catch (InvalidCredentialsException ex) {
            JOptionPane.showMessageDialog(getParent(), ex.getMessage(), "Login failed", JOptionPane.ERROR_MESSAGE);
        }

        password_input.setText("");
        username_input.setText("");
    }//GEN-LAST:event_login_buttonActionPerformed

    private void LoadingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadingActionPerformed
        try {
            Loading();// TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_LoadingActionPerformed

    private void getLengthOfBuildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getLengthOfBuildingActionPerformed
     SpatialModel sp=new SpatialModel();
     try{
            // for (int k=1;k<= 6;k++){
                double spl;
       
                spl=sp.getLengthOfBuilding("A-2");
               
                
              System.out.println(spl+"The length of Building A-2  ");
            // info.setVisible(true);
           //  info.add(spl);
                }
             
        catch (SQLException e) {
            System.out.println("get length error");
        }
    }//GEN-LAST:event_getLengthOfBuildingActionPerformed

    private void getDistancesFromBuildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getDistancesFromBuildingActionPerformed
     SpatialModel sp=new SpatialModel();
     try{
            // for (int k=1;k<= 6;k++){
              Map<String, Float> dis;
            //  entry : dis.entrySet();
      
              dis=sp.getDistancesFromBuilding("A-2");
     //   JFrame frame = new JFrame("The length of Building A-2");
               
     
                
              System.out.println(dis+"The distance of Building A-2  ");
          
      
                }
             
        catch (SQLException e) {
            System.out.println("get distance error");
        }   // TODO add your handling code here:
    }//GEN-LAST:event_getDistancesFromBuildingActionPerformed

    private void getNNearestNeighboursFromBuildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getNNearestNeighboursFromBuildingActionPerformed
       SpatialModel sp=new SpatialModel();
     try{
            // for (int k=1;k<= 6;k++){
              Map<String, Float> dis;
              //entry : dis.entrySet();
      
              dis=sp.getDistancesFromBuilding("A-2");
     //   JFrame frame = new JFrame("The length of Building A-2");
               
     
                
              System.out.println(dis+"getNNearestNeighboursFromBuilding A-2  ");
          
      
                }
             
        catch (SQLException e) {
            System.out.println("get nearestneighbour error");
        }   // TODO add your handling code here:
    }//GEN-LAST:event_getNNearestNeighboursFromBuildingActionPerformed

    private void doUnionOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doUnionOperationActionPerformed
      SpatialModel sp=new SpatialModel();
     try{
           
           
     sp.doUnionOperation();
                
              System.out.println(sp+"doUnionOperation  ");
          
      
                }
             
        catch (SQLException e) {
            System.out.println("get doUnionOperation error");
        }  
    }//GEN-LAST:event_doUnionOperationActionPerformed

    private void getAreaOfBuildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAreaOfBuildingActionPerformed
          SpatialModel sp=new SpatialModel();
     try{
           
           double ar;
           ar=sp.getAreaOfBuilding("A-2");

                System.out.println(ar+"getAreaOfBuilding A2 ");
      
                }
             
        catch (SQLException e) {
            System.out.println("get getAreaOfBuilding error");
        }   
    }//GEN-LAST:event_getAreaOfBuildingActionPerformed

    private void deleteBuildingWithNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBuildingWithNameActionPerformed
        SpatialModel sp=new SpatialModel();
     try{
           sp.deleteBuildingWithName("A-2");
   
           System.out.println(sp+"delete");
     }
             
        catch (SQLException e) {
            System.out.println("get delete error");
        }  
    }//GEN-LAST:event_deleteBuildingWithNameActionPerformed
 //=====================Image GUI 
   public class Image extends javax.swing.JPanel {
     public Image() {
      initComponents();
         myInit();
    }
  public void updateCombo(){
        picture = new myIcon();
        layout_databaseIDtoComboxId = new HashMap<>();
        titleModel Modeltitle = new titleModel();
       
        try {
            int k = 0;
            Map<Integer, String> list1;
            list1 = Modeltitle.getList();
    System.out.println("getList"+Modeltitle.getList());
     System.out.println("图片属性"+picture);
            String[] items = new String[list1.size() + 1];
            items[k++] = "";
            for (Map.Entry<Integer, String> entry : list1.entrySet()) {
                items[k] = entry.getValue();
                layout_databaseIDtoComboxId.put(entry.getKey(), k);
                k++;
               
       System.out.println(list1.size()+"list size");      
       System.out.println("map integer string list1"+list1.entrySet());          
            }
            comboBoxItems = items;
        }
        catch (SQLException e) {
            e.printStackTrace();
            comboBoxItems = new String[]{"loading error.."};
        }
        title_combobox.setModel(new DefaultComboBoxModel(comboBoxItems));
        title_combobox.setSelectedIndex(1);
        picture.setVisible(true);
        picture.setIcon(null);
        
        //显示图片功能
        picture_container.setVisible(true);
          picture_container.setBackground(Color.white);
           
          try{ImageModel modelimage=new ImageModel();
             byte[] img=modelimage.getImage(1);
            ImageIcon pic = new ImageIcon(img,"数组");
           jLabel2= new JLabel("", pic,jLabel2.CENTER);
           picture_container.add(jLabel2);
          
         System.out.println(pic+"image icon");          
   // pic.paintIcon(picture_container, g, 0, 0);
 System.out.println(Arrays.toString(img)+"这是第一张图");
 }     
catch(SQLException e){
     e.printStackTrace();
 System.out.println("not able to load img from db");
 };
 
 
   }
 public void getNextIcon() {
          picture_container.setVisible(true);
        //功能实现了
          picture_container.setBackground(Color.blue);
        
           jLabel2.setVisible(false);
           jLabel3=new JLabel();
          try{ImageModel modelimage=new ImageModel();
              for ( int x=1; x<= 6; x++){
   
          byte[] img=modelimage.getImage(x);
            ImageIcon pic = new ImageIcon(img,"数组");
           jLabel3= new JLabel("", pic,JLabel.CENTER);
       
           picture_container.add(jLabel3);
         System.out.println(pic+"image icon");  
   
 System.out.println(Arrays.toString(img)+"这是第2张图");
 }    } 
catch(SQLException e){
     e.printStackTrace();
 System.out.println("not able to load img from db");
 };
 }
    
     
     


     


    private void myInit() {
       im = new Image();
       im.setVisible(true);
        picture_container.add(im);  
        modelImage = new ImageModel();
        System.out.println("model"+ modelImage.toString());
         System.out.println("Test");
            updateCombo();
            getNextIcon();
          
    }
    }
   public void getNextIcon() {
          picture_container.setVisible(true);
        //功能实现了
          picture_container.setBackground(Color.blue);
        
           jLabel2.setVisible(false);
           jLabel3=new JLabel();
          try{ImageModel modelimage=new ImageModel();
              for ( int x=1; x<= 6; x++){
   
          byte[] img=modelimage.getImage(x);
            ImageIcon pic = new ImageIcon(img,"数组");
           jLabel3= new JLabel("", pic,JLabel.CENTER);
       
           picture_container.add(jLabel3);
         System.out.println(pic+"image icon");  
   
 System.out.println(Arrays.toString(img)+"这是第2张图");
 }    } 
catch(SQLException e){
     e.printStackTrace();
 System.out.println("not able to load img from db");
 };
           }     
   public void InsertImage() {
ImageModel modelimg=new ImageModel();

try{ 
    for (int k=1;k<= 6;k++){
    Integer insertimg;
    insertimg=modelimg.insertImage("img"+k, k);
     }
}
catch (SQLException e) {
System.out.println("insert error");
        }
}
   public void updateCombo(){
        picture = new myIcon();
        layout_databaseIDtoComboxId = new HashMap<>();
        titleModel Modeltitle = new titleModel();
       
        try {
            int k = 0;
            Map<Integer, String> list1;
            list1 = Modeltitle.getList();
    System.out.println("getList"+Modeltitle.getList());
     System.out.println("图片属性"+picture);
            String[] items = new String[list1.size() + 1];
            items[k++] = "";
            for (Map.Entry<Integer, String> entry : list1.entrySet()) {
                items[k] = entry.getValue();
                layout_databaseIDtoComboxId.put(entry.getKey(), k);
                k++;
               
       System.out.println(list1.size()+"list size");      
       System.out.println("map integer string list1"+list1.entrySet());          
            }
            comboBoxItems = items;
        }
        catch (SQLException e) {
            e.printStackTrace();
            comboBoxItems = new String[]{"loading error.."};
        }
        title_combobox.setModel(new DefaultComboBoxModel(comboBoxItems));
        title_combobox.setSelectedIndex(1);
        picture.setVisible(true);
        picture.setIcon(null);
        
        //显示图片功能
        picture_container.setVisible(true);
          picture_container.setBackground(Color.white);
           
          try{ImageModel modelimage=new ImageModel();
             byte[] img=modelimage.getImage(1);
            ImageIcon pic = new ImageIcon(img,"数组");
           jLabel2= new JLabel("", pic,jLabel2.CENTER);
           picture_container.add(jLabel2);
          
         System.out.println(pic+"image icon");          
   // pic.paintIcon(picture_container, g, 0, 0);
 System.out.println(Arrays.toString(img)+"这是第一张图");
 }     
catch(SQLException e){
     e.printStackTrace();
 System.out.println("not able to load img from db");
 };
 
 
   }
   public  void insert() throws SQLException, IOException, Product.NotFoundException {
          
           OracleDataSource ods = ServiceLocator.getConnection();
            try (Connection conn = ods.getConnection()) {
                final List<Product> products = new ArrayList<>();
               
                // new products
                for (int i = 1; i <= 6; i++) {
                    products.add(new Product(i, "img" + i));
                }
                // save to database
                for (Product product: products) {
                    product.saveToDb(conn);
                }
                // set pictures
                for (Product product: products) {
                    product.saveImageToDbFromFile(conn, "./img" + product.getid() + ".gif");
                }
                // get pictures
                for (Product product: products) {
                    product.loadImageFromDbToFile(conn, "./img" + product.getid() + "-out.gif");
                }
                // similarity search
              //  final Product firstProduct = products.get(0);
               // final Product similarProduct = firstProduct.findTheMostSimilar(conn, 0.3, 0.3, 0.1, 0.3);
               // System.out.println("The most similar to " + firstProduct.getid() + " is " + similarProduct.getid());
            }
    }       
   public void Loading() throws SQLException{
  
      OracleDataSource ods = ServiceLocator.getConnection();
            try (Connection conn = ods.getConnection()) { 
            JFrame frame = new JFrame();
        // add a panel for our geometry objects
        frame.getContentPane().add(new Loading(conn));
        // set properties of the window
        frame.setTitle(Loading.class.getCanonicalName());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(MAX_X * WINDOW_ZOOM, MAX_Y * WINDOW_ZOOM);
        frame.setVisible(true);
        // allow to close the database conn on a window-close event
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                try {
                    conn.close();
                } catch (SQLException sqlException) {
                    sqlException.printStackTrace();
                }
            }
        });
            }
    }
   public class Loading extends JPanel {
   public Loading(Connection conn) {
        }
        /**
         *
         * @param args
         * @throws Exception
         */
   public  void main(String[] args) throws Exception {
        // create a OracleDataSource instance
      //  OracleDataSource ods = new OracleDataSource();
     //   ods.setURL("jdbc:oracle:thin:@//gort.fit.vutbr.cz:1521/orclpdb");
        /**
         * *
         * To set System properties, run the Java VM with the following at
         * its command line: ... -Dlogin=LOGIN_TO_ORACLE_DB
         * -Dpassword=PASSWORD_TO_ORACLE_DB ... or set the project
         * properties (in NetBeans: File / Project Properties / Run / VM
         * Options)
         */
     //    ods.setUser("xrenzh00");
     //   ods.setPassword("v6xn2CCx");
        /**
         *
         */
        // connect to the database (cannot close the connection in this method, e.g., by try-with-resources, as it will be utilized asynchronously by Loading.paint()
      //  final Connection connection = ods.getConnection();
        // create GUI window
         OracleDataSource ods = ServiceLocator.getConnection();
            try (Connection conn = ods.getConnection()) {
        JFrame frame = new JFrame();
        // add a panel for our geometry objects
        frame.getContentPane().add(new Loading(conn));
        // set properties of the window
        frame.setTitle(Loading.class.getCanonicalName());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(MAX_X * WINDOW_ZOOM, MAX_Y * WINDOW_ZOOM);
        frame.setVisible(true);
        // allow to close the database conn on a window-close event
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                try {
                    conn.close();
                } catch (SQLException sqlException) {
                    sqlException.printStackTrace();
                }
            }
        });
    }
        }
    /**
     * Create a rectangular "point" for a given point.
     *
     * @param point2D a point
     * @return a rectangular shape centered over the point location with unit dimensions
     */
    private Shape point2dToShape(Point2D point2D) {
        return new Rectangle2D.Double(point2D.getX() - 0.5, point2D.getY() - 0.5, 1, 1);
    }

    /**
     * Make a Shape object from a JGeometry object (the Java representation of
     * SDO_GEOMETRY data). The Shape objects are drawable into Java GUI.
     *
     * @param jGeometry the JGeometry object as an input
     * @return the Shape object corresponding to the input JGeometry object
     * @throws Loading.JGeometryToShapeException if cannot make the Shape object from the
     *                                       JGeometry object
     */
    private Shape jGeometryToShape(JGeometry jGeometry) throws Loading.JGeometryToShapeException {
        // check a type of JGeometry object
        switch (jGeometry.getType()) {
            // return a shape for non-points
            case JGeometry.GTYPE_CURVE:
            case JGeometry.GTYPE_POLYGON:
            case JGeometry.GTYPE_COLLECTION:
            case JGeometry.GTYPE_MULTICURVE:
            case JGeometry.GTYPE_MULTIPOLYGON:
                return jGeometry.createShape();
            // return a rectangular "point" for a point (centered over the point location with unit dimensions)
            case JGeometry.GTYPE_POINT:
                return point2dToShape(jGeometry.getJavaPoint());
            // return an area of rectangular "points" for all points (each centered over the points location with unit dimensions)
            case JGeometry.GTYPE_MULTIPOINT:
                final Area area = new Area();
                for (Point2D point2D : jGeometry.getJavaPoints()) {
                    area.add(new Area(point2dToShape(point2D)));
                }
                return area;
        }
        // it is something else (we do not know how to convert)
        throw new Loading.JGeometryToShapeException();
    }

    /**
     * Load SDO_GEOMETRY objects from a database into a list of shapes.
     *
     * @param connection an opened database connection
     * @return a list of loaded shapes
     * @throws SQLException                  SQL error
     * @throws Loading.JGeometryToShapeException JGeometry to Shape conversion error
     */
    public List<Shape> loadShapesFromDb(Connection connection) throws SQLException, Loading.JGeometryToShapeException {
        final List<Shape> shapeList = new LinkedList<>();
        try (Statement stmt = connection.createStatement()) {
            try (ResultSet resultSet = stmt.executeQuery(SQL_SELECT)) {
                while (resultSet.next()) {
                    // get a JGeometry object (the Java representation of SDO_GEOMETRY data)
                    final byte[] image = resultSet.getBytes(1);
                    final String wkt = resultSet.getString(2);
                    System.out.println("loading " + wkt + " ...");
                    final JGeometry jGeometry;
                    try {
                        jGeometry = JGeometry.load(image);
                    } catch (Exception exception) {
                        // JGeometry.load may cause an Exception which we wrap in SQLException
                        throw new SQLException("error in JGeometry.load", exception);
                    }
                    // add a Shape object (the object drawable into Java GUI) into a list of drawable objects
                    shapeList.add(jGeometryToShape(jGeometry));
                    // a debug message
                    System.out.println("... loaded as " + jGeometry.toStringFull());
                }
            }
        }
        return Collections.unmodifiableList(shapeList);
    }

    /**
     * Invoked by Swing to draw components. Loadinglications should not invoke paint
     * directly, but should instead use the repaint method to schedule the
     * component for redrawing.
     *
     * @param graphics the Graphics context in which to paint
     */
    @Override
    public void paint(Graphics graphics) {
       
             OracleDataSource ods = null;
            try {
                ods = ServiceLocator.getConnection();
            } catch (SQLException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            try (Connection conn = ods.getConnection()){
            // load a list of Shape objects to draw from the database
            final List<Shape> shapeList = loadShapesFromDb(conn);
            // a canvas of the Graphics context
            final Graphics2D graphics2D = (Graphics2D) graphics;
            // draw the Shape objects
            for (Shape shape : shapeList) {
                // draw an interior of the shape
                graphics2D.setPaint(Color.GRAY);
                graphics2D.fill(shape);
                // draw a boundary of the shape
                graphics2D.setPaint(Color.BLACK);
                graphics2D.draw(shape);
            }
        } catch (SQLException | Loading.JGeometryToShapeException exception) {
            exception.printStackTrace();
        }
    }

    /**
     * Exception when converting a JGeometry object to a Shape object.
     */
    public class JGeometryToShapeException extends Exception {
        // nothing to extend
    }

}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JPanel Image;
    private javax.swing.JButton InsertImage;
    private javax.swing.JButton ListAllImage;
    private javax.swing.JButton Loading;
    private javax.swing.JPanel Login;
    private javax.swing.JLabel Password;
    private javax.swing.JPanel Pic_Container_parrent;
    private javax.swing.JPanel Spatial;
    private javax.swing.JLabel UserName;
    private javax.swing.JButton deleteBuildingWithName;
    private javax.swing.JButton doUnionOperation;
    private javax.swing.JButton getAreaOfBuilding;
    private javax.swing.JButton getDistancesFromBuilding;
    private javax.swing.JButton getLengthOfBuilding;
    private javax.swing.JButton getNNearestNeighboursFromBuilding;
    private javax.swing.JButton help;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton login_button;
    private javax.swing.JButton logout_button;
    private javax.swing.JPasswordField password_input;
    private javax.swing.JPanel picture_container;
    private javax.swing.JButton refreshLayoutList_button;
    private javax.swing.JButton similar_button;
    private javax.swing.JComboBox<String> title_combobox;
    private javax.swing.JTextField username_input;
    // End of variables declaration//GEN-END:variables

    //===============image
    private ImageModel modelImage;
    private myIcon picture;
    private Map<Integer, Integer> layout_databaseIDtoComboxId;
    private String[] comboBoxItems;
    private Image im;    
    
     //===============ESATE2
    private boolean drawing = false;
    private static final String SQL_SELECT = "SELECT c.shape, c.shape.Get_WKT() FROM estate2 c"; // an SQL method call needs to be on table.column, not just column
    private static final short MAX_X = 150;
    private static final short MAX_Y = 150;
    private static final short WINDOW_ZOOM = 2;
}

